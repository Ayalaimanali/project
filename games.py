# -*- coding: utf-8 -*-
"""games.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sm5NPb2eS2u0-VN5uEoD0P_cp7sCGYyj
"""

from bs4 import BeautifulSoup
import requests  
import re
import pandas as pd
import numpy as np

"""# Parsing"""

#  class for parsing information from https://metarankings.ru/ and saving into csv file
class Games():
#  initialize list of game links and list of result dictionaries 
    def __init__(self):
        self.game_links = []
        self.result = []

#  collect list of game links
    def get_game_links(self,n):
        url = f'https://metarankings.ru/best-games/page/'
        for i in range(1,n+1):  # pages 
            print(f'parsing page -{i}')
            url_i = url + str(i)
            response = requests.get(url_i)
            response.encoding ='utf8'
            page = BeautifulSoup(response.text, 'html.parser')
            links = page.find_all('a', class_='name')
            for link in links:
                self.game_links.append(link.get("href"))
# collect info about game 
    def get_game_info(self):
        for url in self.game_links:
            print(f'parsing url -{url}')
            response = requests.get(url)    
            response.encoding ='utf8' 
            page = BeautifulSoup(response.text, 'html.parser')
            game = {}
            try:
                game['name'] = url.split('/')[-2]
                game['score'] = page.find('div', class_='score').text
                game['num_of_voute'] = page.find('div', class_='rating').find('span').text
                featuers = page.find('div', class_= 'featured-game').find_all('p')
                for i in range(len(featuers)):
                    game[featuers[i].find('span').text] = featuers[i].text
                self.result.append(game)
            except:
                pass
#  saving into csv
    def save_info(self,file_name):
        df =  pd.DataFrame(self.result)
        df.to_csv(f'{file_name}.csv', index=False)

# creating instance of Games
g = Games()
g.get_game_links(18)
g.get_game_info()
g.save_info('df')

# reading DataFrame from csv
df = pd.read_csv('df.csv')

#information about DataFrame
df.info()

# reaname columns
df = df.rename(columns={'Разработчик:':'developer', 'Издатель:':'publisher','Платформы:':'platforms','Жанр:':'genre','Локализация:':'local',	'Дата выхода:':'publish_time'})

# get year
def get_year(x):
    try:
        return int(x.strip()[-5:])
    except:
        return 0

# data cleaning
df.developer = df.developer.apply(lambda x: x.strip()[12:])
df.publisher = df.publisher.apply(lambda x: x.strip()[10:])
df.platforms = df.platforms.apply(lambda x: x.strip()[11:])
df.genre = df.genre.apply(lambda x: x.strip()[6:])
df.local = df.local.apply(lambda x: x.strip()[13:])
df.publish_time = df.publish_time.apply(get_year)
df.num_of_voute = df.num_of_voute.apply(lambda x: int(x.replace(' ','')))

"""# Visualiaztion"""

import matplotlib.pyplot as plt
import seaborn as sns

df.head()

df.info()

labels = list(df.platforms.value_counts()[:9].index)
sizes = list(df.platforms.value_counts()[:9].values)
labels.append('others')
sizes.append(sum(df.platforms.value_counts()[9:].values))
fig1, ax1 = plt.subplots()
plt.title('Platforms')
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

labels = list(df.genre.value_counts()[:9].index)
sizes = list(df.genre.value_counts()[:9].values)
labels.append('others')
sizes.append(sum(df.platforms.value_counts()[9:].values))
fig1, ax1 = plt.subplots()
plt.title('Genres')
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

plt.figure(figsize=(8, 6))
plt.xlabel("Counts")
plt.ylabel("Score")
plt.title('Score vs Counts')
df.score.hist()

plt.figure(figsize=(8, 6))
plt.plot(df.num_of_voute, df.score, '+')
plt.xlabel("Number of voutes")
plt.ylabel("Score")
plt.title('Score vs Number of voutes')

labels = df.local.value_counts().index
sizes = df.local.value_counts().values

fig1, ax1 = plt.subplots()
plt.title('Localization')
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

df1 = df.developer.value_counts().head(20)
plt.rcdefaults()
fig, ax = plt.subplots()
plt.xticks(rotation=90)
plt.title('Top 20 developers and counts of their games')
ax.plot(df1.index,df1.values)

df1 = df.publisher.value_counts().head(20)
plt.rcdefaults()
fig, ax = plt.subplots()
plt.xticks(rotation=90)
plt.title('Top 20 publisher and counts of their games')
ax.plot(df1.index,df1.values)